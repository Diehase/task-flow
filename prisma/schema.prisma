generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  passwordHash String
  role         Role     @default(USER)
  boardsOwned  Board[]  @relation("BoardsOwned")
  memberships  BoardMember[]
  tasksCreated Task[]   @relation("TasksCreated")
  tasksAssigned Task[]  @relation("TasksAssigned")
  comments     Comment[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Board {
  id        String        @id @default(cuid())
  name      String
  owner     User          @relation("BoardsOwned", fields: [ownerId], references: [id])
  ownerId   String
  members   BoardMember[]
  columns   Column[]
  tags      Tag[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model BoardMember {
  id        String  @id @default(cuid())
  board     Board   @relation(fields: [boardId], references: [id])
  boardId   String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  role      Role    @default(MANAGER)

  @@unique([boardId, userId])
}

model Column {
  id        String  @id @default(cuid())
  name      String
  order     Int
  board     Board   @relation(fields: [boardId], references: [id])
  boardId   String
  tasks     Task[]
}

model Task {
  id           String   @id @default(cuid())
  title        String
  description  String? 
  dueDate      DateTime?
  column       Column   @relation(fields: [columnId], references: [id])
  columnId     String
  createdBy    User     @relation("TasksCreated", fields: [createdById], references: [id])
  createdById  String
  assignedTo   User?    @relation("TasksAssigned", fields: [assignedToId], references: [id])
  assignedToId String?
  comments     Comment[]
  tags         TaskTag[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Tag {
  id      String   @id @default(cuid())
  name    String
  board   Board    @relation(fields: [boardId], references: [id])
  boardId String
  tasks   TaskTag[]
  @@unique([boardId, name])
}

model TaskTag {
  task   Task @relation(fields: [taskId], references: [id])
  taskId String
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  String

  @@id([taskId, tagId])
}
